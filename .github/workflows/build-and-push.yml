name: Workflow SF7 API
on:
  push:
    branches: [main]

defaults:
 run:
  working-directory: ./api

jobs:
  symfony_tests:
    runs-on: ubuntu-latest
    environment: test
    name: Symfony 7 PHP 8
    services:
      mysql:
        image: mysql:${{ vars.MYSQL_VERSION }}
        ports:
          - "${{ vars.MYSQL_PORT }}:${{ vars.MYSQL_PORT }}"
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DB_TEST }}
        options: >-
          --health-cmd="mysqladmin ping -h localhost --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    strategy:
      fail-fast: true
    steps:
      # —— Setup Github actions 🐙 —————————————————————————————————————————————
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Symfony
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.deb.sh' | sudo -E bash
          sudo apt-get update && sudo apt-get install -y symfony-cli

      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4' 
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, json, curl, amqp
        env:
          update: true

      - name: Check PHP Version
        run: php -v
        
      # —— Composer 🧙‍️ —————————————————————————————————————————————————————————
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: "$PWD/vendor"
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
 
      # —— Symfony 🎵 ——————————————————————————————————————————————————————————
      - name: Prepare .env file
        run: |
          echo "APP_ENV=${{ vars.APP_ENV }}" >> $GITHUB_ENV
          echo "APP_DEBUG=${{ vars.APP_DEBUG }}" >> $GITHUB_ENV 
          echo "APP_SECRET=$(openssl rand -hex 16)" >> $GITHUB_ENV 
          echo "JWT_SECRET='${{ secrets.JWT_SECRET }}'" >> $GITHUB_ENV 
          echo "MESSENGER_TRANSPORT_DSN=${{ secrets.MESSENGER_TRANSPORT_DSN }}" >> $GITHUB_ENV 
          echo "CORS_ALLOW_ORIGIN='${{ secrets.CORS_ALLOW_ORIGIN }}'" >> $GITHUB_ENV 
          echo "KERNEL_CLASS='${{ vars.KERNEL_CLASS }}'" >> $GITHUB_ENV
          echo "SYMFONY_DEPRECATIONS_HELPER=${{ vars.SYMFONY_DEPRECATIONS_HELPER }}" >> $GITHUB_ENV
          echo "PANTHER_APP_ENV=${{ vars.PANTHER_APP_ENV }}" >> $GITHUB_ENV
          echo "PANTHER_ERROR_SCREENSHOT_DIR=${{ vars.PANTHER_ERROR_SCREENSHOT_DIR }}" >> $GITHUB_ENV
         
      - name: Set up MySQL environment
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ vars.MYSQL_PORT }}
          MYSQL_DB: "${{ secrets.MYSQL_DB }}"
          MYSQL_VERSION: ${{ vars.MYSQL_VERSION }}
          MYSQL_CHARSET: ${{ vars.MYSQL_CHARSET }}
        run: |
          echo "DATABASE_URL=mysql://$MYSQL_USER:$MYSQL_PASSWORD@$MYSQL_HOST:$MYSQL_PORT/$MYSQL_DB?serverVersion=$MYSQL_VERSION&charset=$MYSQL_CHARSET" >> $GITHUB_ENV
          
      - name: Check Symfony requirements
        run: symfony check:requirements
          
      - name: Check the Symfony version and environnements
        run: php bin/console --version
      
      - name: Run database migrations
        run: php bin/console doctrine:migrations:migrate --no-interaction

      - name: Static analysis of PHP code (PHPStan)
        run: |
          ./vendor/bin/phpstan analyse --configuration=phpstan.dist.neon --memory-limit=512M
        continue-on-error: true
      
      ## —— Tests ✅ ———————————————————————————————————————————————————————————
      - name: Run functionnal and unit tests
        run: |
          ./vendor/bin/phpunit

      # —— Artifact ——————————————————————————————————————————————————————————
      - name: Archive test artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.ARTIFACT_ENV }}-${{ github.run_id }}-artifact
          path: .
          retention-days: 1

  deploy:
    needs: [symfony_tests]
    environment: production
    name: Symfony prod and deployment
    runs-on: ubuntu-latest          
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.ARTIFACT_ENV }}-${{ github.run_id }}-artifact
          path: .

      # —— Symfony 🎵 ——————————————————————————————————————————————————————————
      - name: Prepare github env
        run: |
          echo "APP_ENV=${{ vars.APP_ENV }}" >> $GITHUB_ENV
          echo "APP_DEBUG=${{ vars.APP_DEBUG }}" >> $GITHUB_ENV 
          echo "APP_SECRET=$(openssl rand -hex 16)" >> $GITHUB_ENV 
          echo "JWT_SECRET='${{ secrets.JWT_SECRET }}'" >> $GITHUB_ENV 
          echo "MESSENGER_TRANSPORT_DSN=${{ secrets.MESSENGER_TRANSPORT_DSN }}" >> $GITHUB_ENV 
          echo "CORS_ALLOW_ORIGIN='${{ secrets.CORS_ALLOW_ORIGIN }}'" >> $GITHUB_ENV 
       
      - name: Set up MySQL environment
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ vars.MYSQL_PORT }}
          MYSQL_DB: "${{ secrets.MYSQL_DB }}"
          MYSQL_VERSION: ${{ vars.MYSQL_VERSION }}
          MYSQL_CHARSET: ${{ vars.MYSQL_CHARSET }}
        run: |
          echo "DATABASE_URL=mysql://$MYSQL_USER:$MYSQL_PASSWORD@$MYSQL_HOST:$MYSQL_PORT/$MYSQL_DB?serverVersion=$MYSQL_VERSION&charset=$MYSQL_CHARSET" >> $GITHUB_ENV
       
      # —— Composer 🧙‍️ —————————————————————————————————————————————————————————  
      - name: Remove dev dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --no-dev --optimize-autoloader

      - name: Modify composer.json to disable dotenv (k8s)
        run: |
          jq '.extra.runtime = {"disable_dotenv": true}' composer.json > composer_tmp.json
          mv composer_tmp.json composer.json

      - name: Update composer.lock
        run: composer update

      - name: Validate composer.json and composer.lock
        run: composer validate

      # —— Docker 🐳 ——————————————————————————————————————————————————————————
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        
      - name: Build Docker image
        run: |
          DOCKER_REPO_PATH=${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}
          docker build -t $DOCKER_REPO_PATH:latest -t $DOCKER_REPO_PATH:${{ github.sha }} .
          docker push $DOCKER_REPO_PATH:latest
          docker push $DOCKER_REPO_PATH:${{ github.sha }}

      - name: Log out from DockerHub
        run: |
            docker logout